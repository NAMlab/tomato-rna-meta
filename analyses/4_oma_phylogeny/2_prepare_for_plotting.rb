# This script takes all the CSVs generated by script 1 and, selects the most ancient HOG for each protein
# and combines them all into one big CSV file used for plotting in script 3.
require "csv"
require "net/http"
require "json"

levels = IO.readlines("input/clades_hierarchy.txt").map(&:chomp)

def get_hogid(hog)
  # Returns the integer ID of the HOG by retrieving it from OMA
  json = JSON.parse(Net::HTTP.get(URI("https://omabrowser.org/api/hog/#{hog}/")))
  json.first["roothog_id"]
end

puts "target,hog,hog_id,level,set"
Dir.glob("output/hogs/*.csv").each do |g|
  name = g.split("/").last.split(".").first

  CSV.foreach(g, headers: true) do |row|
    if row[1] and row[1] != "TIMEOUT"
			level, hog = row[1].split(" ").map{ |h| a = h.split("->"); [levels.index(a[1]), a[0]] }.min_by {|h| h.first}
    else
      level = levels.length - 1
      hog = ""
    end
    hogid = hog.empty? ? "" : get_hogid(hog)
    puts "#{row[0]},#{hog},#{hogid},#{level},#{name}"
  end
end
